package org.jparsec.core;

import org.jparsec.core.Text;
import static org.jparsec.core.Text.*;

import org.monadium.core.data.Maybe;
import static org.monadium.core.data.Maybe.*;
import org.monadium.core.data.Tuple;
import static org.monadium.core.data.Tuple.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TextTest {
	@Test public void testBasic() {
		assertTrue(text("").isEmpty());
		assertTrue(text("x").isNonempty());
		assertEquals(0, text("").length());
		assertEquals(1, text("x").length());
		assertEquals("", text("").toString());
		assertEquals("x", text("x").toString());
		assertEquals(text(""), text("").concat(text("")));
		assertEquals(text("x"), text("x").concat(text("")));
		assertEquals(text("y"), text("").concat(text("y")));
		assertEquals(text("xy"), text("x").concat(text("y")));
		assertEquals(nothing(), text("").head());
		assertEquals(just('x'), text("x").head());
		assertEquals(just('x'), text("xy").head());
		assertEquals(nothing(), text("").tail());
		assertEquals(just(text("")), text("x").tail());
		assertEquals(just(text("y")), text("xy").tail());
		assertEquals(nothing(), text("").uncons());
		assertEquals(just(tuple('x', text(""))), text("x").uncons());
		assertEquals(just(tuple('x', text("y"))), text("xy").uncons());
		assertEquals(text(""), text("").take(-1));
		assertEquals(text(""), text("").take(0));
		assertEquals(text(""), text("").take(1));
		assertEquals(text(""), text("x").take(-1));
		assertEquals(text(""), text("x").take(0));
		assertEquals(text("x"), text("x").take(1));
		assertEquals(text(""), text("xy").take(-1));
		assertEquals(text(""), text("xy").take(0));
		assertEquals(text("x"), text("xy").take(1));
		assertEquals(text(""), text("").drop(-1));
		assertEquals(text(""), text("").drop(0));
		assertEquals(text(""), text("").drop(1));
		assertEquals(text("x"), text("x").drop(-1));
		assertEquals(text("x"), text("x").drop(0));
		assertEquals(text(""), text("x").drop(1));
		assertEquals(text("xy"), text("xy").drop(-1));
		assertEquals(text("xy"), text("xy").drop(0));
		assertEquals(text("y"), text("xy").drop(1));
		assertEquals(tuple(text(""), text("")), text("").splitAt(-1));
		assertEquals(tuple(text(""), text("")), text("").splitAt(0));
		assertEquals(tuple(text(""), text("")), text("").splitAt(1));
		assertEquals(tuple(text(""), text("x")), text("x").splitAt(-1));
		assertEquals(tuple(text(""), text("x")), text("x").splitAt(0));
		assertEquals(tuple(text("x"), text("")), text("x").splitAt(1));
		assertEquals(tuple(text(""), text("xy")), text("xy").splitAt(-1));
		assertEquals(tuple(text(""), text("xy")), text("xy").splitAt(0));
		assertEquals(tuple(text("x"), text("y")), text("xy").splitAt(1));
		assertEquals(text(""), text("").takeWhile(c -> false));
		assertEquals(text(""), text("").takeWhile(c -> true));
		assertEquals(text(""), text("").takeWhile(c -> c == 'x'));
		assertEquals(text(""), text("").takeWhile(c -> c == 'y'));
		assertEquals(text(""), text("x").takeWhile(c -> false));
		assertEquals(text("x"), text("x").takeWhile(c -> true));
		assertEquals(text("x"), text("x").takeWhile(c -> c == 'x'));
		assertEquals(text(""), text("x").takeWhile(c -> c == 'y'));
		assertEquals(text(""), text("xy").takeWhile(c -> false));
		assertEquals(text("xy"), text("xy").takeWhile(c -> true));
		assertEquals(text("x"), text("xy").takeWhile(c -> c == 'x'));
		assertEquals(text(""), text("xy").takeWhile(c -> c == 'y'));
		assertEquals(text(""), text("").dropWhile(c -> false));
		assertEquals(text(""), text("").dropWhile(c -> true));
		assertEquals(text(""), text("").dropWhile(c -> c == 'x'));
		assertEquals(text(""), text("").dropWhile(c -> c == 'y'));
		assertEquals(text("x"), text("x").dropWhile(c -> false));
		assertEquals(text(""), text("x").dropWhile(c -> true));
		assertEquals(text(""), text("x").dropWhile(c -> c == 'x'));
		assertEquals(text("x"), text("x").dropWhile(c -> c == 'y'));
		assertEquals(text("xy"), text("xy").dropWhile(c -> false));
		assertEquals(text(""), text("xy").dropWhile(c -> true));
		assertEquals(text("y"), text("xy").dropWhile(c -> c == 'x'));
		assertEquals(text("xy"), text("xy").dropWhile(c -> c == 'y'));
		assertTrue(text("").isPrefixOf(text("")));
		assertTrue(text("").isPrefixOf(text("x")));
		assertTrue(text("").isPrefixOf(text("xy")));
		assertFalse(text("x").isPrefixOf(text("")));
		assertTrue(text("x").isPrefixOf(text("x")));
		assertTrue(text("x").isPrefixOf(text("xy")));
		assertFalse(text("xy").isPrefixOf(text("")));
		assertFalse(text("xy").isPrefixOf(text("x")));
		assertTrue(text("xy").isPrefixOf(text("xy")));
		assertEquals(nothing(), text("").index(-1));
		assertEquals(nothing(), text("").index(0));
		assertEquals(nothing(), text("").index(1));
		assertEquals(nothing(), text("x").index(-1));
		assertEquals(just('x'), text("x").index(0));
		assertEquals(nothing(), text("x").index(1));
		assertEquals(nothing(), text("xy").index(-1));
		assertEquals(just('x'), text("xy").index(0));
		assertEquals(just('y'), text("xy").index(1));
	}
}
